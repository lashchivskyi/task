{"version":3,"sources":["search.js","paginator.js","App.js","serviceWorker.js","index.js"],"names":["converted_guests","guests","map","user","arrived","guest","console","log","Search","state","filter","query","handleSearch","e","target","value","toLowerCase","results","name","indexOf","company","email","address","phone","setState","this","list","length","className","onChange","placeholder","key","id","Component","Paginator","offset","perPage","currentPage","data","handlePageClick","selectedPage","selected","receivedData","Fragment","postData","slice","renderFragment","pageCount","Math","ceil","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","App","render","to","path","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fa98fe0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport guests from \"./guests.json\";\r\nimport \"./App.css\";\r\n\r\nconst converted_guests = guests.map((user) => ({\r\n  arrived: false,\r\n  guest: user,\r\n}));\r\nconsole.log(converted_guests);\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    guests: converted_guests,\r\n    filter: null,\r\n    query: \"\",\r\n  };\r\n\r\n  handleSearch = (e) => {\r\n    const { guests } = this.state;\r\n    const query = e.target.value.toLowerCase();\r\n    const results = guests.filter(\r\n      (user) =>\r\n        user.guest.name.toLowerCase().indexOf(query) !== -1 ||\r\n        user.guest.company.toLowerCase().indexOf(query) !== -1 ||\r\n        user.guest.email.toLowerCase().indexOf(query) !== -1 ||\r\n        user.guest.address.toLowerCase().indexOf(query) !== -1 ||\r\n        user.guest.phone.toLowerCase().indexOf(query) !== -1\r\n    );\r\n    console.log(\"[query]\", results);\r\n\r\n    this.setState({\r\n      filter: results,\r\n      query: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { guests, query, filter } = this.state;\r\n    const { handleSearch } = this;\r\n\r\n    let list = guests;\r\n    if (filter !== null && query.length > 0) {\r\n      list = filter;\r\n    }\r\n\r\n    return (\r\n      <div className=\"classHeader\">\r\n        <div>\r\n          <h1 className=\"headerName\">Guest list</h1>\r\n          <header>\r\n            <input\r\n              className=\"handleSearch\"\r\n              onChange={handleSearch}\r\n              value={query}\r\n              placeholder=\"text..\"\r\n            />\r\n          </header>\r\n          <div className=\"users\">\r\n            <h3>The number of elements in the array: {guests.length}</h3>\r\n            {list.map((user, key) => (\r\n              <div key={key} id=\"usersId\">\r\n                <div className=\"usersInfo\">\r\n                  <h4>{user.guest.name}</h4>\r\n                  <h3>{user.guest.company}</h3>\r\n                  <h3>{user.guest.email}</h3>\r\n                  <h3>{user.guest.phone}</h3>\r\n                  <p>{user.guest.address}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from \"react\";\r\nimport guests from \"./guests.json\";\r\nimport \"./App.css\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\nconst converted_guests = guests.map((user) => ({\r\n  arrived: false,\r\n  guest: user,\r\n}));\r\n\r\nclass Paginator extends Component {\r\n  state = {\r\n    guests: converted_guests,\r\n    offset: 0,\r\n    perPage: 3,\r\n    currentPage: 0,\r\n    data: [],\r\n  };\r\n\r\n  renderFragment(user) {\r\n    return (\r\n      <React.Fragment>\r\n        <h4>{user.name}</h4>\r\n        <h3>{user.company}</h3>\r\n        <h3>{user.email}</h3>\r\n        <h3>{user.phone}</h3>\r\n        <p>{user.address}</p>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  receivedData() {\r\n    const data = guests;\r\n    const slice = data.slice(\r\n      this.state.offset,\r\n      this.state.offset + this.state.perPage\r\n    );\r\n    const postData = slice.map((user) => this.renderFragment(user));\r\n\r\n    this.setState({\r\n      pageCount: Math.ceil(data.length / this.state.perPage),\r\n      postData,\r\n    });\r\n  }\r\n\r\n  handlePageClick = (e) => {\r\n    const selectedPage = e.selected;\r\n    const offset = selectedPage * this.state.perPage;\r\n    this.setState(\r\n      {\r\n        currentPage: selectedPage,\r\n        offset: offset,\r\n      },\r\n      () => {\r\n        this.receivedData();\r\n      }\r\n    );\r\n  };\r\n  componentDidMount() {\r\n    this.receivedData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"classHeader\">\r\n        <div className=\"users\">\r\n          <h1 className=\"headerName\">Pagination</h1>\r\n          <div id=\"usersId\">{this.state.postData}</div>\r\n          <div>\r\n            <ReactPaginate\r\n              previousLabel={\"prev\"}\r\n              nextLabel={\"next\"}\r\n              breakLabel={\"...\"}\r\n              breakClassName={\"break-me\"}\r\n              pageCount={this.state.pageCount}\r\n              marginPagesDisplayed={2}\r\n              pageRangeDisplayed={5}\r\n              onPageChange={this.handlePageClick}\r\n              containerClassName={\"pagination\"}\r\n              subContainerClassName={\"pages pagination\"}\r\n              activeClassName={\"active\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Paginator;\r\n","import React, { Component } from \"react\";\nimport Search from \"./search\";\nimport Paginator from \"./paginator\";\nimport { Route, NavLink } from \"react-router-dom\";\n\nclass App extends Component {\n  render = () => {\n    return (\n      <div>\n        <div className=\"navLink\">\n          <NavLink className=\"padding\" to=\"/search\">\n            Search\n          </NavLink>\n          <NavLink to=\"/paginator\">Paginator</NavLink>\n        </div>\n        <Route path=\"/paginator\" render={() => <Paginator />} />\n        <Route path=\"/search\" render={() => <Search />} />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}